{"ast":null,"code":"import React, { Component } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PropTypes from 'prop-types';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction calculateDegreeFromLabels(degree, labels) {\n  var perLevelDegree = degree / labels.length;\n  return perLevelDegree;\n}\n\nfunction calculateLabelFromValue(value, labels, minValue, maxValue) {\n  var currentValue = (value - minValue) / (maxValue - minValue);\n  var currentIndex = Math.round((labels.length - 1) * currentValue);\n  var label = labels[currentIndex];\n  return label;\n}\n\nfunction limitValue(value, minValue, maxValue, allowedDecimals) {\n  var currentValue = 0;\n\n  if (!isNaN(value)) {\n    if (!isNaN(allowedDecimals) && allowedDecimals > 0) {\n      currentValue = parseFloat(value).toFixed(allowedDecimals < 4 ? parseInt(allowedDecimals) : 4);\n    } else {\n      currentValue = parseInt(value);\n    }\n  }\n\n  return Math.min(Math.max(currentValue, minValue), maxValue);\n}\n\nfunction validateSize(current, original) {\n  var currentSize = original;\n\n  if (!isNaN(current)) {\n    currentSize = parseInt(current);\n  }\n\n  return currentSize;\n}\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar style = StyleSheet.create({\n  wrapper: {\n    marginVertical: 5,\n    alignSelf: 'center'\n  },\n  circleWrapper: {\n    overflow: 'hidden'\n  },\n  outerCircle: {\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    overflow: 'hidden',\n    borderColor: '#ffffff',\n    backgroundColor: '#e6e6e6'\n  },\n  halfCircle: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  imageWrapper: {\n    position: 'absolute',\n    left: 0,\n    zIndex: 10\n  },\n  image: {\n    resizeMode: 'stretch',\n    height: width - 20,\n    width: width - 20\n  },\n  innerCircle: {\n    overflow: 'hidden',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n    width: width * 0.6,\n    height: width / 2 * 0.6,\n    borderTopLeftRadius: width / 2 - 10,\n    borderTopRightRadius: width / 2 - 10\n  },\n  labelWrapper: {\n    marginVertical: 5,\n    alignItems: 'center'\n  },\n  label: {\n    fontSize: 25,\n    fontWeight: 'bold'\n  },\n  labelNote: {\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\n\nvar Speedometer = function (_Component) {\n  _inheritsLoose(Speedometer, _Component);\n\n  function Speedometer(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.speedometerValue = new Animated.Value(props.defaultValue);\n    return _this;\n  }\n\n  var _proto = Speedometer.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        value = _this$props.value,\n        size = _this$props.size,\n        minValue = _this$props.minValue,\n        maxValue = _this$props.maxValue,\n        easeDuration = _this$props.easeDuration,\n        allowedDecimals = _this$props.allowedDecimals,\n        labels = _this$props.labels,\n        needleImage = _this$props.needleImage,\n        wrapperStyle = _this$props.wrapperStyle,\n        outerCircleStyle = _this$props.outerCircleStyle,\n        halfCircleStyle = _this$props.halfCircleStyle,\n        imageWrapperStyle = _this$props.imageWrapperStyle,\n        imageStyle = _this$props.imageStyle,\n        innerCircleStyle = _this$props.innerCircleStyle,\n        labelWrapperStyle = _this$props.labelWrapperStyle,\n        labelStyle = _this$props.labelStyle,\n        labelNoteStyle = _this$props.labelNoteStyle,\n        useNativeDriver = _this$props.useNativeDriver;\n    var degree = 180;\n    var perLevelDegree = calculateDegreeFromLabels(degree, labels);\n    var label = calculateLabelFromValue(limitValue(value, minValue, maxValue, allowedDecimals), labels, minValue, maxValue);\n    Animated.timing(this.speedometerValue, {\n      toValue: limitValue(value, minValue, maxValue, allowedDecimals),\n      duration: easeDuration,\n      easing: Easing.linear,\n      useNativeDriver: useNativeDriver\n    }).start();\n    var rotate = this.speedometerValue.interpolate({\n      inputRange: [minValue, maxValue],\n      outputRange: ['-90deg', '90deg']\n    });\n    var currentSize = validateSize(size, width - 20);\n    return React.createElement(View, {\n      style: [style.wrapper, {\n        width: currentSize,\n        height: currentSize / 2\n      }, wrapperStyle]\n    }, React.createElement(View, {\n      style: [style.outerCircle, {\n        width: currentSize,\n        height: currentSize / 2,\n        borderTopLeftRadius: currentSize / 2,\n        borderTopRightRadius: currentSize / 2\n      }, outerCircleStyle]\n    }, labels.map(function (level, index) {\n      var circleDegree = 90 + index * perLevelDegree;\n      return React.createElement(View, {\n        key: level.name,\n        style: [style.halfCircle, {\n          backgroundColor: level.activeBarColor,\n          width: currentSize / 2,\n          height: currentSize,\n          borderRadius: currentSize / 2,\n          transform: [{\n            translateX: currentSize / 4\n          }, {\n            rotate: circleDegree + \"deg\"\n          }, {\n            translateX: currentSize / 4 * -1\n          }]\n        }, halfCircleStyle]\n      });\n    }), React.createElement(Animated.View, {\n      style: [style.imageWrapper, {\n        top: -(currentSize / 15),\n        transform: [{\n          rotate: rotate\n        }]\n      }, imageWrapperStyle]\n    }, React.createElement(Image, {\n      style: [style.image, {\n        width: currentSize,\n        height: currentSize\n      }, imageStyle],\n      source: needleImage\n    })), React.createElement(View, {\n      style: [style.innerCircle, {\n        width: currentSize * 0.6,\n        height: currentSize / 2 * 0.6,\n        borderTopLeftRadius: currentSize / 2,\n        borderTopRightRadius: currentSize / 2\n      }, innerCircleStyle]\n    })), React.createElement(View, {\n      style: [style.labelWrapper, labelWrapperStyle]\n    }, React.createElement(Text, {\n      style: [style.label, labelStyle]\n    }, limitValue(value, minValue, maxValue, allowedDecimals)), React.createElement(Text, {\n      style: [style.labelNote, {\n        color: label.labelColor\n      }, labelNoteStyle]\n    }, label.name)));\n  };\n\n  return Speedometer;\n}(Component);\n\nSpeedometer.defaultProps = {\n  defaultValue: 50,\n  minValue: 0,\n  maxValue: 100,\n  easeDuration: 500,\n  allowedDecimals: 0,\n  labels: [{\n    name: 'Pathetically weak',\n    labelColor: '#ff2900',\n    activeBarColor: '#ff2900'\n  }, {\n    name: 'Very weak',\n    labelColor: '#ff5400',\n    activeBarColor: '#ff5400'\n  }, {\n    name: 'So-so',\n    labelColor: '#f4ab44',\n    activeBarColor: '#f4ab44'\n  }, {\n    name: 'Fair',\n    labelColor: '#f2cf1f',\n    activeBarColor: '#f2cf1f'\n  }, {\n    name: 'Strong',\n    labelColor: '#14eb6e',\n    activeBarColor: '#14eb6e'\n  }, {\n    name: 'Unbelievably strong',\n    labelColor: '#00ff6b',\n    activeBarColor: '#00ff6b'\n  }],\n  needleImage: require(\"../images/speedometer-needle.png\"),\n  wrapperStyle: {},\n  outerCircleStyle: {},\n  halfCircleStyle: {},\n  imageWrapperStyle: {},\n  imageStyle: {},\n  innerCircleStyle: {},\n  labelWrapperStyle: {},\n  labelStyle: {},\n  labelNoteStyle: {},\n  useNativeDriver: true\n};\nSpeedometer.propTypes = {\n  value: PropTypes.number.isRequired,\n  defaultValue: PropTypes.number,\n  size: PropTypes.number,\n  minValue: PropTypes.number,\n  maxValue: PropTypes.number,\n  easeDuration: PropTypes.number,\n  allowedDecimals: PropTypes.number,\n  labels: PropTypes.array,\n  needleImage: PropTypes.any,\n  wrapperStyle: PropTypes.object,\n  outerCircleStyle: PropTypes.object,\n  halfCircleStyle: PropTypes.object,\n  imageWrapperStyle: PropTypes.object,\n  imageStyle: PropTypes.object,\n  innerCircleStyle: PropTypes.object,\n  labelWrapperStyle: PropTypes.object,\n  labelStyle: PropTypes.object,\n  labelNoteStyle: PropTypes.object,\n  useNativeDriver: PropTypes.bool\n};\nexport default Speedometer;","map":{"version":3,"sources":["../src/utils/calculate-degree-from-labels.js","../src/utils/calculate-label-from-value.js","../src/utils/limit-value.js","../src/utils/validate-size.js","../src/style/index.js","../src/index.js"],"names":["perLevelDegree","degree","labels","currentValue","value","maxValue","currentIndex","Math","label","isNaN","allowedDecimals","parseFloat","parseInt","currentSize","width","Dimensions","wrapper","marginVertical","alignSelf","circleWrapper","overflow","outerCircle","justifyContent","alignItems","borderColor","backgroundColor","halfCircle","position","top","left","borderTopRightRadius","borderBottomRightRadius","imageWrapper","zIndex","image","resizeMode","height","innerCircle","borderTopLeftRadius","labelWrapper","fontSize","fontWeight","labelNote","Speedometer","Component","Animated","props","render","size","minValue","easeDuration","needleImage","wrapperStyle","outerCircleStyle","halfCircleStyle","imageWrapperStyle","imageStyle","innerCircleStyle","labelWrapperStyle","labelStyle","labelNoteStyle","useNativeDriver","calculateDegreeFromLabels","calculateLabelFromValue","limitValue","toValue","duration","easing","Easing","rotate","inputRange","outputRange","validateSize","deviceWidth","style","circleDegree","index","level","borderRadius","transform","translateX","color","labelColor","defaultValue","name","activeBarColor","require","PropTypes","bool"],"mappings":"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","sourcesContent":["function calculateDegreeFromLabels(degree, labels) {\r\n  const perLevelDegree = (degree) / (labels.length);\r\n  return perLevelDegree;\r\n}\r\n\r\nexport default calculateDegreeFromLabels;\r\n","function calculateLabelFromValue(value, labels, minValue, maxValue) {\r\n  const currentValue = (value - minValue) / (maxValue - minValue);\r\n  const currentIndex = Math.round((labels.length - 1) * currentValue);\r\n  const label = labels[currentIndex];\r\n  return label;\r\n}\r\n\r\nexport default calculateLabelFromValue;\r\n","/* eslint radix: [\"error\", \"as-needed\"] */\r\n/* eslint-disable no-restricted-globals */\r\nfunction limitValue(value, minValue, maxValue, allowedDecimals) {\r\n  let currentValue = 0;\r\n  if (!isNaN(value)) {\r\n    if (!isNaN(allowedDecimals) && allowedDecimals > 0) {\r\n      currentValue = parseFloat(value).toFixed(allowedDecimals < 4 ? parseInt(allowedDecimals) : 4);\r\n    } else {\r\n      currentValue = parseInt(value);\r\n    }\r\n  }\r\n  return Math.min(Math.max(currentValue, minValue), maxValue);\r\n}\r\n\r\nexport default limitValue;\r\n","/* eslint radix: [\"error\", \"as-needed\"] */\r\n/* eslint-disable no-restricted-globals */\r\nfunction validateSize(current, original) {\r\n  let currentSize = original;\r\n  if (!isNaN(current)) {\r\n    currentSize = parseInt(current);\r\n  }\r\n  return currentSize;\r\n}\r\n\r\nexport default validateSize;\r\n","/* eslint import/no-unresolved: [2, { ignore: ['react-native'] }] */\r\nimport { StyleSheet, Dimensions } from 'react-native';\r\n\r\nexport const { width } = Dimensions.get('window');\r\n\r\nexport default StyleSheet.create({\r\n  wrapper: {\r\n    marginVertical: 5,\r\n    alignSelf: 'center',\r\n  },\r\n  // Circular Container\r\n  circleWrapper: {\r\n    overflow: 'hidden',\r\n  },\r\n  outerCircle: {\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n    overflow: 'hidden',\r\n    borderColor: '#ffffff',\r\n    backgroundColor: '#e6e6e6',\r\n  },\r\n  halfCircle: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    borderTopRightRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  },\r\n  imageWrapper: {\r\n    position: 'absolute',\r\n    left: 0,\r\n    zIndex: 10,\r\n  },\r\n  image: {\r\n    resizeMode: 'stretch',\r\n    height: width - 20,\r\n    width: width - 20,\r\n  },\r\n  innerCircle: {\r\n    overflow: 'hidden',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n    backgroundColor: '#ffffff',\r\n    width: width * 0.6,\r\n    height: (width / 2) * 0.6,\r\n    borderTopLeftRadius: width / 2 - 10,\r\n    borderTopRightRadius: width / 2 - 10,\r\n  },\r\n  labelWrapper: {\r\n    marginVertical: 5,\r\n    alignItems: 'center',\r\n  },\r\n  label: {\r\n    fontSize: 25,\r\n    fontWeight: 'bold',\r\n  },\r\n  labelNote: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n","/* eslint import/no-unresolved: [2, { ignore: ['react-native', 'react'] }] */\r\n/* eslint radix: [\"error\", \"as-needed\"] */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  View,\r\n  Image,\r\n  Animated,\r\n  Easing,\r\n  Text,\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Utils\r\nimport calculateDegreeFromLabels from './utils/calculate-degree-from-labels';\r\nimport calculateLabelFromValue from './utils/calculate-label-from-value';\r\nimport limitValue from './utils/limit-value';\r\nimport validateSize from './utils/validate-size';\r\n\r\n// Style\r\nimport style, { width as deviceWidth } from './style';\r\n\r\n// eslint-disable-next-line react/prefer-stateless-function\r\nclass Speedometer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.speedometerValue = new Animated.Value(props.defaultValue);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      value,\r\n      size,\r\n      minValue,\r\n      maxValue,\r\n      easeDuration,\r\n      allowedDecimals,\r\n      labels,\r\n      needleImage,\r\n      wrapperStyle,\r\n      outerCircleStyle,\r\n      halfCircleStyle,\r\n      imageWrapperStyle,\r\n      imageStyle,\r\n      innerCircleStyle,\r\n      labelWrapperStyle,\r\n      labelStyle,\r\n      labelNoteStyle,\r\n      useNativeDriver,\r\n    } = this.props;\r\n    const degree = 180;\r\n    const perLevelDegree = calculateDegreeFromLabels(degree, labels);\r\n    const label = calculateLabelFromValue(\r\n      limitValue(value, minValue, maxValue, allowedDecimals), labels, minValue, maxValue,\r\n    );\r\n    Animated.timing(\r\n      this.speedometerValue,\r\n      {\r\n        toValue: limitValue(value, minValue, maxValue, allowedDecimals),\r\n        duration: easeDuration,\r\n        easing: Easing.linear,\r\n        useNativeDriver,\r\n      },\r\n    ).start();\r\n\r\n    const rotate = this.speedometerValue.interpolate({\r\n      inputRange: [minValue, maxValue],\r\n      outputRange: ['-90deg', '90deg'],\r\n    });\r\n\r\n    const currentSize = validateSize(size, deviceWidth - 20);\r\n    return (\r\n      <View style={[style.wrapper, {\r\n        width: currentSize,\r\n        height: currentSize / 2,\r\n      }, wrapperStyle]}\r\n      >\r\n        <View style={[style.outerCircle, {\r\n          width: currentSize,\r\n          height: currentSize / 2,\r\n          borderTopLeftRadius: currentSize / 2,\r\n          borderTopRightRadius: currentSize / 2,\r\n        }, outerCircleStyle]}\r\n        >\r\n          {labels.map((level, index) => {\r\n            const circleDegree = 90 + (index * perLevelDegree);\r\n            return (\r\n              <View\r\n                key={level.name}\r\n                style={[style.halfCircle, {\r\n                  backgroundColor: level.activeBarColor,\r\n                  width: currentSize / 2,\r\n                  height: currentSize,\r\n                  borderRadius: currentSize / 2,\r\n                  transform: [\r\n                    { translateX: currentSize / 4 },\r\n                    { rotate: `${circleDegree}deg` },\r\n                    { translateX: (currentSize / 4 * -1) },\r\n                  ],\r\n                }, halfCircleStyle]}\r\n              />\r\n            );\r\n          })}\r\n          <Animated.View style={[style.imageWrapper,\r\n            {\r\n              top: -(currentSize / 15),\r\n              transform: [{ rotate }],\r\n            },\r\n            imageWrapperStyle]}\r\n          >\r\n            <Image\r\n              style={[style.image,\r\n                {\r\n                  width: currentSize,\r\n                  height: currentSize,\r\n                }, imageStyle]}\r\n              source={needleImage}\r\n            />\r\n          </Animated.View>\r\n          <View style={[style.innerCircle, {\r\n            width: currentSize * 0.6,\r\n            height: (currentSize / 2) * 0.6,\r\n            borderTopLeftRadius: currentSize / 2,\r\n            borderTopRightRadius: currentSize / 2,\r\n          }, innerCircleStyle]}\r\n          />\r\n        </View>\r\n        <View style={[style.labelWrapper, labelWrapperStyle]}>\r\n          <Text style={\r\n            [style.label, labelStyle]}\r\n          >\r\n            {limitValue(value, minValue, maxValue, allowedDecimals)}\r\n          </Text>\r\n          <Text style={\r\n            [style.labelNote, { color: label.labelColor }, labelNoteStyle]}\r\n          >\r\n            {label.name}\r\n          </Text>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nSpeedometer.defaultProps = {\r\n  defaultValue: 50,\r\n  minValue: 0,\r\n  maxValue: 100,\r\n  easeDuration: 500,\r\n  allowedDecimals: 0,\r\n  labels: [\r\n    {\r\n      name: 'Pathetically weak',\r\n      labelColor: '#ff2900',\r\n      activeBarColor: '#ff2900',\r\n    },\r\n    {\r\n      name: 'Very weak',\r\n      labelColor: '#ff5400',\r\n      activeBarColor: '#ff5400',\r\n    },\r\n    {\r\n      name: 'So-so',\r\n      labelColor: '#f4ab44',\r\n      activeBarColor: '#f4ab44',\r\n    },\r\n    {\r\n      name: 'Fair',\r\n      labelColor: '#f2cf1f',\r\n      activeBarColor: '#f2cf1f',\r\n    },\r\n    {\r\n      name: 'Strong',\r\n      labelColor: '#14eb6e',\r\n      activeBarColor: '#14eb6e',\r\n    },\r\n    {\r\n      name: 'Unbelievably strong',\r\n      labelColor: '#00ff6b',\r\n      activeBarColor: '#00ff6b',\r\n    },\r\n  ],\r\n  needleImage: require('../images/speedometer-needle.png'),\r\n  wrapperStyle: {},\r\n  outerCircleStyle: {},\r\n  halfCircleStyle: {},\r\n  imageWrapperStyle: {},\r\n  imageStyle: {},\r\n  innerCircleStyle: {},\r\n  labelWrapperStyle: {},\r\n  labelStyle: {},\r\n  labelNoteStyle: {},\r\n  useNativeDriver: true,\r\n};\r\n\r\nSpeedometer.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  defaultValue: PropTypes.number,\r\n  size: PropTypes.number,\r\n  minValue: PropTypes.number,\r\n  maxValue: PropTypes.number,\r\n  easeDuration: PropTypes.number,\r\n  allowedDecimals: PropTypes.number,\r\n  labels: PropTypes.array,\r\n  needleImage: PropTypes.any,\r\n  wrapperStyle: PropTypes.object,\r\n  outerCircleStyle: PropTypes.object,\r\n  halfCircleStyle: PropTypes.object,\r\n  imageWrapperStyle: PropTypes.object,\r\n  imageStyle: PropTypes.object,\r\n  innerCircleStyle: PropTypes.object,\r\n  labelWrapperStyle: PropTypes.object,\r\n  labelStyle: PropTypes.object,\r\n  labelNoteStyle: PropTypes.object,\r\n  useNativeDriver: PropTypes.bool,\r\n};\r\n\r\nexport default Speedometer;\r\n"]},"metadata":{},"sourceType":"module"}