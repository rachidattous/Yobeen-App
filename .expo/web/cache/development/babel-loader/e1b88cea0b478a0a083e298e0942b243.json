{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/viet/Desktop/stage/yobeen agrotech app/src/scenes/Donut.js\";\n\nimport React, { Component, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { max } from 'react-native-reanimated';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { Context as AuthContext } from \"../context/AuthContext\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedInput = Animated.createAnimatedComponent(TextInput);\nconsole.disableYellowBox = true;\n\nvar Donut = function Donut(props) {\n  var a = 2 * Math.PI * 60;\n  var radius = 60;\n  var duration = 800;\n  var delay = 0;\n  var max = 100;\n  var strokeWidth = 9;\n  var somme = radius + strokeWidth;\n  var textColor = '#2B2A52';\n  var circleRef = React.useRef();\n  var inputRef = React.useRef();\n  var animatedValue = React.useRef(new Animated.Value(0)).current;\n\n  var animation = function animation(toValue) {\n    return Animated.timing(animatedValue, {\n      toValue: toValue,\n      duration: duration,\n      delay: delay,\n      useNativeDriver: true\n    }).start();\n  };\n\n  React.useEffect(function () {\n    animation(props.percentage);\n    animatedValue.addListener(function (v) {\n      if (circleRef != null && circleRef.current) {\n        var maxPerc = 100 * v.value / max;\n        var strokeDashoffset = a - a * maxPerc / 100;\n        circleRef.current.setNativeProps({\n          strokeDashoffset: strokeDashoffset\n        });\n      }\n\n      if (inputRef != null && inputRef.current) {\n        inputRef.current.setNativeProps({\n          text: \"\" + Math.round(v.value)\n        });\n      }\n    });\n  });\n\n  var _useContext = useContext(AuthContext),\n      state = _useContext.state,\n      signin = _useContext.signin;\n\n  return React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, React.createElement(Svg, {\n    width: radius * 2,\n    height: radius * 2,\n    viewBox: \"0 0 \" + somme * 2 + \" \" + somme * 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, React.createElement(G, {\n    rotation: \"-90\",\n    origin: somme + \",\" + somme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, React.createElement(Circle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: props.color,\n    strokeWidth: \"6\",\n    r: radius,\n    strokeOpacity: 0.3,\n    fill: \"transparent\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }), React.createElement(AnimatedCircle, {\n    ref: circleRef,\n    cx: \"50%\",\n    cy: \"50%\",\n    stroke: props.color,\n    strokeWidth: strokeWidth,\n    r: radius,\n    strokeDasharray: a,\n    strokeDashoffset: a,\n    fill: \"transparent\",\n    strokeLinecap: \"round\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }))), React.createElement(AnimatedInput, {\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    defaultValue: \"0\",\n    style: [StyleSheet.absoluteFillObject, {\n      fontSize: 26,\n      color: textColor != null ? textColor : props.color\n    }, {\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginLeft: -16\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: [StyleSheet.absoluteFillObject, {\n      fontSize: 26,\n      color: textColor != null ? textColor : props.color\n    }, {\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginTop: 40,\n      marginLeft: 35\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"%\"));\n};\n\nexport default Donut;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/viet/Desktop/stage/yobeen agrotech app/src/scenes/Donut.js"],"names":["React","Component","useContext","max","Svg","G","Circle","Context","AuthContext","AnimatedCircle","Animated","createAnimatedComponent","AnimatedInput","TextInput","console","disableYellowBox","Donut","props","a","Math","PI","radius","duration","delay","strokeWidth","somme","textColor","circleRef","useRef","inputRef","animatedValue","Value","current","animation","toValue","timing","useNativeDriver","start","useEffect","percentage","addListener","v","maxPerc","value","strokeDashoffset","setNativeProps","text","round","state","signin","alignItems","color","StyleSheet","absoluteFillObject","fontSize","fontWeight","textAlign","marginLeft","marginTop","styles","create","container","flex"],"mappings":"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","sourcesContent":["import React,{Component,useContext} from 'react'\r\nimport { \r\n    View,\r\n    TextInput, \r\n    StyleSheet,\r\n    Animated,\r\n    Text\r\n} from 'react-native';\r\nimport { max } from 'react-native-reanimated';\r\nimport Svg, {G,Circle} from 'react-native-svg';\r\nimport {Context as AuthContext} from '../context/AuthContext';\r\n\r\nconst AnimatedCircle=Animated.createAnimatedComponent(Circle);\r\nconst AnimatedInput=Animated.createAnimatedComponent(TextInput);\r\nconsole.disableYellowBox = true;\r\n\r\nconst Donut=(props) =>{\r\n   const a=2*Math.PI*60;  //Perimetre\r\n   const radius=60;  //rayon\r\n   const duration=800;\r\n   const delay=0;\r\n   const max=100;   //cad 100% \r\n   const strokeWidth=9;\r\n   const somme=radius+strokeWidth;  \r\n   //const color='tomato';\r\n   const textColor='#2B2A52';\r\n   //const percentage=62;\r\n   const circleRef=React.useRef();\r\n   const inputRef=React.useRef();\r\n   const animatedValue =React.useRef(new Animated.Value(0)).current;\r\n   const animation=(toValue) => {\r\n        return Animated.timing(animatedValue, {\r\n           toValue,\r\n           duration,\r\n           delay,\r\n           useNativeDriver: true,\r\n        }).start();\r\n    }; \r\n\r\nReact.useEffect(() =>{\r\n    animation(props.percentage);\r\n    animatedValue.addListener((v) =>{\r\n        if (circleRef?.current) {\r\n            const maxPerc=(100 * v.value)/max;\r\n            const strokeDashoffset = a-(a*maxPerc)/100;\r\n            circleRef.current.setNativeProps({\r\n                strokeDashoffset,\r\n            }); \r\n        }\r\n\r\n        if (inputRef?.current){\r\n            inputRef.current.setNativeProps({\r\n                text:`${Math.round(v.value)}`,\r\n            })\r\n        }\r\n    });\r\n});\r\n\r\n   const {state,signin} =useContext(AuthContext);\r\n        return (\r\n            <View  style={{alignItems:'center'}}>\r\n                <Svg \r\n                    width={radius*2} \r\n                    height={radius*2} \r\n                    viewBox={`0 0 ${somme * 2} ${somme * 2}`}\r\n                >\r\n                    <G rotation='-90' origin={`${somme},${somme}`}>\r\n                        <Circle\r\n                            cx='50%'\r\n                            cy='50%'\r\n                            stroke={props.color}\r\n                            strokeWidth='6'\r\n                            r={radius}\r\n                            strokeOpacity={0.3}\r\n                            fill=\"transparent\"\r\n                        />\r\n                        <AnimatedCircle\r\n                            ref={circleRef}\r\n                            cx='50%'\r\n                            cy='50%'\r\n                            stroke={props.color}\r\n                            strokeWidth={strokeWidth}\r\n                            r={radius}\r\n                            strokeDasharray={a} \r\n                            strokeDashoffset={a} //humidité de 60% //Equivalente à ((100-60)*a)/100\r\n                            fill=\"transparent\"\r\n                            strokeLinecap='round'               \r\n                        />\r\n                    </G>\r\n                </Svg>\r\n                <AnimatedInput\r\n                    ref={inputRef}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    editable={false}\r\n                    defaultValue=\"0\"\r\n                    style={[\r\n                        StyleSheet.absoluteFillObject,\r\n                        {fontSize:26,color: textColor ?? props.color},\r\n                        {fontWeight:'bold',textAlign:'center',marginLeft:-16},\r\n                    ]}\r\n                />\r\n                <Text\r\n                    style={[\r\n                        StyleSheet.absoluteFillObject,\r\n                        {fontSize:26,color: textColor ?? props.color},\r\n                        {fontWeight:'bold',textAlign:'center',marginTop:40,marginLeft:35},\r\n                    ]}\r\n                >%</Text>\r\n            </View>\r\n        );\r\n};\r\nexport default Donut;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1, \r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}